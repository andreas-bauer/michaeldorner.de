[{"content":" In many ways, the authors kind of created something without input from the stakeholders, and the stakeholders told them what mattered, which is not represented. It feels unfortunately backwards as a result.\nâ€” Reviewer 1 from a prestigous software engineering journal\nIn this blog post, I explain (not only to reviewer 1 from a prestigious software engineering journal ðŸ™„) the differences and, more importantly, the interplay between exploratory research and confirmatory research.\nLet\u0026rsquo;s start with graphical approach to the (pragmatic) empirical research cycle involving both exploratory (theory-generating) and confirmatory (theory-testing) research.\nTwo Sides of the Same Coin # Exploratory research begins with specific observations, distills patterns in those observations, and derives theories from the observed patterns using inductive reasoning. The nature of exploratory research enables to analyze chosen cases and their contexts in great detail, but also leads to limited generalizability as they are drawn from those specific cases (especially when there is little relation to existing evidence that would allow for generalization by analogy). As such, it remains susceptible to researcher bias due to the absence of an already existing theory.\nConfirmatory research, in turn, begins with a theory, makes predictions (often in the form of hypotheses), and evaluates whether those predictions hold true or not in empirical observations. To build a robust body of knowledge, we obviously need both exploratory and confirmatory research following complementary research methods (and qualitative and data) to minimize bias and maximize the validity and reliability of our theories efficiently.\nConclusion # We clearly see that reviewer 1 from the quote above was expecting an exploratory study, while we designed a confirmatory one. The choice of research method in our study could have given him a hint: How would you conduct an experiment with hypotheses (predictions) without an initial theory? The fact that our study revealed that our theory could not be confirmed is not a valid reason for rejection.\nTikZ Code # In case the text or the figure above is helpful for your paper or your rejoinder, feel free to use the text and the TikZ graphic:\n\\documentclass[border=2mm]{standalone} \\usepackage{charter} \\usepackage{tikz} \\usepackage{xcolor} \\definecolor{blue}{RGB}{0, 114, 178} \\definecolor{red}{RGB}{213, 94, 0} \\begin{document} \\begin{tikzpicture} \\foreach \\a/\\t in {90/Theory, 0/Prediction, -90/Observation, -180/Pattern}{ \\node (\\t) at (\\a:2cm) {\\textbf{\\t}}; } \\draw[-latex, thick, red] (90-25:2cm) arc (90-25:0+10:2cm); \\draw[-latex, thick, red] (0-10:2cm) arc (0-10:-90+30:2cm); \\draw[-latex, thick, blue] (-90-30:2cm) arc (-90-30:-180+10:2cm); \\draw[-latex, thick, blue] (-180-10:2cm) arc (-180-10:-270+25:2cm); \\draw[latex-, thick, blue] (-3.5,2) -- (-3.5,-2) node[blue, midway, anchor=north, rotate=90] {Inductive reasoning} node[blue, midway, anchor=south, rotate=90] {Exploratory research}; \\draw[-latex, thick, red] (3.5,2) -- (3.5,-2) node[red, midway, anchor=south, rotate=90] {Deductive reasoning} node[red, midway, anchor=north, rotate=90] {Confirmatory research}; \\end{tikzpicture} \\end{document} ","date":"May 17, 2024","externalUrl":null,"permalink":"/posts/exploratory-vs-confirmatory-research/","section":"Posts","summary":"In this blog post, I explain the differences and, more importantly, the interplay between exploratory research and confirmatory research.","title":"Exploratory vs. Confirmatory Research","type":"posts"},{"content":"I blog about software engineering research and beyond.\n","date":"May 17, 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"I blog about software engineering research and beyond.","title":"Posts","type":"posts"},{"content":"On this website, I blog, talk, and publish about my research on\nhow to build software better and how to build better software.\n","date":"May 17, 2024","externalUrl":null,"permalink":"/","section":"Welcome! ðŸŽ‰","summary":"On this website, I blog, talk, and publish about my research on\nhow to build software better and how to build better software.","title":"Welcome! ðŸŽ‰","type":"page"},{"content":"","date":"April 27, 2024","externalUrl":null,"permalink":"/research/code-review/","section":"Research","summary":"","title":"Code Review","type":"research"},{"content":"Modern software systems are often too large, too complex, and evolving too fast for single developers to oversee. Therefore, software engineering has become highly collaborative. Often, engineers and their teams collaborate across borders, especially in multinational companies with subsidiaries spread around the globe. Such collaboration has an often overlooked legal implication: the profits from those cross-border collaborations become taxable.\nNow that we understood the foundations and the challenges in tax compliance for software engineering from the previous blog posts of this series, it is time to answer the question of all questions: Is cross-border collaboration and, therefore, also the taxation of it, a real issue?\nApproximating Cross-border Collaboration # To estimate the prevalence of cross-border collaboration, we measure cross-border code reviews as proxy for cross-border collaboration in a typical industrial setting. A cross-border code review is code review with participants from more than one country. Although it originated in collocated, waterfall-like code inspections, its modern stances are lightweight and asynchronous discussions among developers around a code change. Different tools are in use, for example, Gerrit or Github and Gitlab with their implementation of code review as so-called pull and merge requests, respectively. Although code review is by far not the only type of collaboration that may include taxable transactions and is also likely not sufficient to determine company-wide transfer prices, the following characteristics make code review a suitable first proxy for cross-border collaboration:\nMore than code only: Code review not only includes the actual code change and its authors but also includes the feedback from reviewers that may have formed or changed the code change significantly but is no longer visible in the repository after merging the code change into the code base. Therefore, our proxy goes beyond existing code-based measurements for collaboration. Accessible \u0026amp; complete: The code review discussions are (company-internally) public by default and are, thus, accessible. Unlike other tools like instant messaging services or e-mail, code review does not split into public and private, whose analysis may cause privacy concerns. Persistent: Code review tools are the backbone of modern code review and ease data extraction. Other types of code review (for example, private or synchronous discussion around a code change through meetings or instant messaging) may not be captured through the tooling, though. Measurement # We measured the share of cross-border code reviews at a multinational company delivering software and related services worldwide with main R\u0026amp;D locations in three countries. For many years the company has tried to allocate products to particular sites to avoid the burden of cross-border collaboration. However, our analysis shows that developers represent more than 25 locations because the new corporate work flexibility policy permits relocations. The company uses a single, central, and company-wide tool for its internal software development and code review. Understandably, our case company wants to remain anonymous. Therefore, we are not able to describe the case any further. However, we believe that our case company is exemplary for a multinational enterprise developing software.\nWe provide a replication package to reproduce our results for any GitHub Enterprise instance. Due to the sensitive topic, we are not able to share our data. From the code review tool, we extracted all code reviews that were completed in 2019, 2020, 2021, and 2022 including their activities. All bot activities were removed and were not considered in our analysis. We then modelled code reviews as communication channels among code review participants. We consider a code review as a discussion thread that is completed as soon as no more information regarding a particular code change is exchanged (i.e., the code review is closed). We complement each code review participant with the information of the country of the employing subsidiaries at the time of the code review.\nResults # The share of cross-border code review at our case company in the years 2019, 2020, 2021 and 2022 (black line) monthly sampled. Since not all historical locations of all code review participants could be reliably retrieved, the share of cross-border reviews could be more significant (indicated by the red area). The figure above shows an increase in relative cross-border code reviews over time. The share of cross-border code reviews was between 6% and 10% in 2019 and 2020. Yet, we see a further steep increase reaching between 25% and 30% at the end of 2022.\nInterestingly, 6% of all cross-border code reviews involve participants from more than two countries. This means transfer pricing in collaborative software engineering becomes not only a bilateral but a multilateral problem with not only two but multipleâ€”in our case company up to sixâ€”different jurisdictions and tax authorities involved in the transfer pricing process.\nAlthough the share of cross-border collaboration may vary among companies, yet, our findings suggest thatâ€”through the proxy of cross-border code reviewsâ€”cross-border collaboration becomes a significant part of daily life in multinational software companies. It is fair to assume that a further increase in cross-border collaborations in software engineering will draw the attention of tax authorities.\nConclusion # On the one hand, the arm\u0026rsquo;s length principle is the de-facto standard for multinational enterprises that any multinational company must comply with. On the other hand, software engineering is highly collaborative; beyond geographical and organizational boundaries. Determining a reasonable transfer price for this cross-border collaboration brings the general challenge of taxing intangibles to a new level of complexity.\nPretending to be dead for tax reasons is no option because ignoring the significant cross-border collaboration in modern software development, as we exemplarily found, is a slippery slope: Cross-border collaborations in software engineering will draw the attention of tax authorities. Also, ceasing or forbidding all cross-border collaboration in software engineering is not a valid solution: Reversing the collaborative nature of modern software engineering is likely too costly and takes too long.\nObviously, there are neither simple solutions for such a complex and interdisciplinary problem, nor a single article that can solve this complex problem potentially affecting every software-developing company with developers employed by subsidiaries in more than one country. However, our article aims to bring this eminent and unsolved problem of taxing collaborative software engineering to the audience that can solve this issue. As a software engineering community, we will need to find a common understanding of what constitutes taxable transactions and each company that develops software collaboratively within more than one country needs to learn how to track and value cross-border collaboration, how to estimate the transfer pricing, and how to report these to the tax authorities to be compliant.\nGot you excited? Find more blog posts, research articles, and talks about tax compliance in software engineering here.\nThis series is based on our research article Taxing Collaborative Software Engineering published as open-access at IEEE Software. ","date":"April 27, 2024","externalUrl":null,"permalink":"/posts/need-for-tax-compliance-in-software-engineering/","section":"Posts","summary":"In third blog post in the series on tax compliance in software engineering, we will estimate the prevelance of cross-border collaboration, and therefore, the need for tax compliance in software engineering by measuring cross-border code review in a multinational software company.","title":"Need for Tax Compliance in Software Engineering","type":"posts"},{"content":"Here you find the different research topics I am working on. Those research topics connect the concise blog posts, the informative talks, and complete yet cumbersome scientific publications.\n","date":"April 27, 2024","externalUrl":null,"permalink":"/research/","section":"Research","summary":"Here you find the different research topics I am working on. Those research topics connect the concise blog posts, the informative talks, and complete yet cumbersome scientific publications.","title":"Research","type":"research"},{"content":"","date":"April 27, 2024","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"April 27, 2024","externalUrl":null,"permalink":"/series/tax-compliance-for-software-engineering/","section":"Series","summary":"","title":"Tax Compliance for Software Engineering","type":"series"},{"content":"Collaborative software engineering distributed among different countries has an often overlooked legal implication: the profits from those cross-border collaborations become taxable.\nIn this research, we set out to explore this novel aspect of collaborative software engineering and explore how companies can ensure tax compliance for their software engineering efforts.\n","date":"April 27, 2024","externalUrl":null,"permalink":"/research/tax-compliance-in-software-engineering/","section":"Research","summary":"Collaborative software engineering distributed among different countries has an often overlooked legal implication: the profits from those cross-border collaborations become taxable.\nIn this research, we set out to explore this novel aspect of collaborative software engineering and explore how companies can ensure tax compliance for their software engineering efforts.","title":"Tax Compliance in Software Engineering","type":"research"},{"content":"Modern software systems are often too large, too complex, and evolving too fast for single developers to oversee. Therefore, software engineering has become highly collaborative. Often, engineers and their teams collaborate across borders, especially in multinational companies with subsidiaries spread around the globe. Such collaboration has an often overlooked legal implication: the profits from those cross-border collaborations become taxable. In this second blog post in our series on tax compliance in software engineering, we will discuss the unique and fundamental challenges of taxing collaborative software engineering.\nFrom the last blog post, we understood that companies must pay a transfer price for goods, intangibles, or services transferred in a multinational enterprise to comply with the international standards on taxation. So, what are transfer prices for collaborative software engineering that comply with this Arm\u0026rsquo;s Length Principle? Determining a market price for intangibles is inherently difficult and is reflected in a broad price range. Collaborative software engineering, however, scales the problem of a transfer-price determination to a new level of complexity because the reality of modern software engineering is significantly more complex than our introductory example above may suggest. Since transfer price regulations apply to a much broader definition of intangibles compared to accounting standards, the latter can not be used as a reliable measure of value for transfer pricing purposes.\nThere are three main high-level challenges for transfer pricing in collaborative software engineering within multinational enterprises. The figure below illustrates the complexity in modern collaborative software engineering at devnullsoft Group (the fictitious multinational company from introduced in the previous post of this series) and where those three challenges apply.\nThe challenges for tax compliance in modern collaborative software engineering Challenge 1: What is a taxable transaction in software engineering? # The trouble for transfer pricing in software engineering begins with a fundamental question: What is actually a taxable transaction in the context of collaborative software engineering? It is not immediately clear what types or characteristics classify a taxable exchange of intangibles or services across the boundaries of a country in the context of software engineering.\nAmong other potentially relevant types of taxable intangibles, such as goodwill or group synergies, this blog post focusses on two types of intangibles that are highly relevant for software engineering: know-how and licenses.\nThe OECD Transfer Pricing Guidelines define know-how as the \u0026ldquo;proprietary information or knowledge that assist[s] or improve[s] a commercial activity, but that [is] not registered for protection in the manner of a patent or trademar\u0026rdquo;. The commercial activity includes the manufacturing, marketing, research and development of and for a software system.\nDoes the OECD definition imply that all types of information exchanged during collaborative software engineering are know-how? On the one hand, yes, since all information is proprietary and, to some extent, contributes to the software being developed or its engineering processes. But on the other hand, how do we know which information assists or improves the commercial activity, meaning the engineering of the software system, over time? For example, a quick and dirty bug fix without sufficient documentation or testing may improve the software system in the present but makes changes more costly or even impossible in the future.\nThe second type of intangibles highly relevant to transfer pricing in software engineering if transferred across borders is licenses. Although maybe not even explicit, the company-internal use and reuse of components is an instance of licensing. Complex software systems are not monolithic blocks of code but consist of components that are developed, shared, and reused by separate teams. However, we lack a common understanding of software components and reuse in software engineering for taxation. Not every component is directly used for or in a software-intensive product, but maybe adds value to the product. For example, a well-engineered CI/CD pipeline accelerates the development cycles and brings new features or bug fixes faster to the customers. Furthermore, it is also not always clear who owns, contributes to, or uses a component within a company, and the roles may even change over time. In contrast to open source, the reuse is often implicit, lacking a company-wide license agreement that clarifies the responsibility and accountability between component owners and users. Even worse, we do not even know if our definition and understanding of code ownership suffices the definition of ownership in a taxation context.\nAdditionally, we see an interplay between those two types of intangibles, know-how and licensing, since they may be two sides of the same collaboration. For example, when code contributions from a component user support instances of reuse.\nInsight: Identifying the taxable transactions requires either a holistic perspective of software engineering or at least suitable, practical, and accurate proxies. Compliant software engineering needs a common understanding and a taxonomy of taxable transactions specific to software engineering. Challenge 2: How to track cross-border transactions in software engineering? # Also, the practical tracking of taxable know-how and licensing (and potentially other types of intangibles) is a challenge on its own.\nTracking know-how is an inherently difficult task. Since the teams collaborating are no longer colocated, numerous tools enable an exchange of know-how in software engineering. Those tools are suitable as rich data sources to different extents: While domain-specific tools like issue trackers or collaborative software development platforms like GitHub or Gitlab often track the exchanges very thoroughly, other communication and collaboration tools do not: Online meetings, for example, can facilitate an exchange of taxable intangibles, but this exchange is not tracked by any tool. But even if there is a rich data basis available, leveraging those data sources is problematic for following reasons:\nEstablishing location: It can be difficult to establish the location of collaborators or capture when a location of a collaborator has changed, because organizations often preserve only the latest version of the organizational structures. Privacy: Analyzing the complete communication of developers may be perceived as a measure of surveillance, which raises ethical and legal concerns related to privacy. In contrast to the potentially rich sources for tracing taxable transactions from collaboration tools used in software engineering, tracking company-internal reuse often lacks a solid data basis. Although companies often track the reuse of external open-source components for open-source license compliance purposes, those tools are rarely used or suitable for tracking company-internal reuse. Also, only reuse that crosses borders is taxable; information that is often not available or stored over time, although component ownership is not static and may be subject to change.\nInsight: Data for tracking taxable transactions may be incomplete, faulty with respect to location, or restricted. There is no dedicated tool support yet for the practical transfer price determination. Challenge 3: How to value taxable transactions in software engineering? # While it is inherently difficult to tax intangibles in general, things are even more complicated in software engineering. Potentially taxable intangibles cover a large range of granularity: They may be as large as a microservice providing user authentication which itself is used by microservices of other teams (see intangible licenses) or as small as a code change, code review, or bug report (see intangible know-how). Although the code change or feedback in a code review is smallâ€”maybe even only one line of code, like in the case of the Heartbleed security bug in the OpenSSL cryptography library from 2014â€”the potential impact on the software system can be tremendous or even fatal. A software change or a code review delivers value through impact, not size.\nThe same applies to licensing. The number of use relations of a software component or its size (however defined) does not reflect the value provided to the software-intensive product. While the software component for user authentication may be important for operating the software-intensive product and, therefore, has a large amount of depedent software components, it is not differentiating and may even be considered a commodity.\nThis means we cannot simply use purely quantitative measurements for transfer pricing. However, the sheer mass of small, fine-grained transactions of all types makes a human qualitative case-by-case evaluation impossible.\nInsight: A purely quantitative valuing can hardly reflect the value of transactions; however, a purely qualitative assessment does not scale with the magnitude of cross-border transactions in modern software development. Transfer pricing requires a tool-supported processes that assists tax and software engineering experts. In the next blog post, we will look into the preveleance of taxable cross-border collaboration and find out if the problem of taxation is an acutal challenge.\nThis series is based on our research article Taxing Collaborative Software Engineering published as open-access at IEEE Software. ","date":"March 26, 2024","externalUrl":null,"permalink":"/posts/challenges-of-tax-compliance-in-software-engineering/","section":"Posts","summary":"In this second blog post in the series on tax compliance in software engineering, we will discuss the unique and fundamental challenges of taxing collaborative software engineering.","title":"Challenges for Tax Compliance in Software Engineering","type":"posts"},{"content":" Heâ€™s spending a year dead for tax reasons.\nâ€” Douglas Adams, The Hitchhikerâ€™s Guide to the Galaxy\nModern software systems are often too large, too complex, and evolving too fast for single developers to oversee. Therefore, software engineering has become highly collaborative. Often, engineers and their teams collaborate across borders, especially in multinational companies with subsidiaries spread around the globe. Such collaboration has an often overlooked legal implication: the profits from those cross-border collaborations become taxable.\nIn this first blog post in our series on tax compliance in software engineering, we start with a gentle introduction to international standards in multinational taxation and its basic Arm\u0026rsquo;s Length Principle from a software engineering perspective. And no worries, no prior knowledge or background is needed. In the following blog posts of this series, we will then discuss the unique challenges of taxing collaborative software engineering and we show the need for tax compliance in collaborative software engineering by approximating cross-border collaboration through code review.\nA Simplified Example # Let\u0026rsquo;s start with a fictitious multinational enterprise called devnullsoft Group that develops and sells a software-intensive product. devnullsoft Group has two legal entities: devnullsoft GmbH in Germany and its subsidiary devnullsoft AB in Sweden. The German development team employed by devnullsoft GmbH develops the software jointly with their Swedish colleagues employed by the Swedish devnullsoft AB. The German devnullsoft GmbH sells the resulting product to customers.\nThe Underlying Problem # Without any further consideration, solely the German devnullsoft GmbH generates profits, which are then fully taxed in Germany according to German law. The Swedish tax authorities are left out in the cold because devnullsoft AB has no share of the profit that could be taxed in Sweden, although devnullsoft AB contributed significantly to the product through code contributions, code reviews, bug reports, tests, architectural decisions, or other contributions that made the success of the software possible.\nThe Arm\u0026rsquo;s Length Principle # To avoid this scenario and to provide a common ground for international taxation, reducing uncertainty for multinational enterprises, and preventing tax avoidance through profit shifting, nearly all countries in the world agreed on and implemented the so-called Arm\u0026rsquo;s Length Principle as defined in the OECD Transfer Pricing Guidelines for Multinational Enterprises and Tax Administrations. The Arm\u0026rsquo;s Length Principle is the guiding principle and the de-facto standard for the taxation of multinational enterprises. It requires associated enterprises to operate as if they were not associated to another and, from a taxation perspective, are regular participants in the market. This principle ensures that transfer prices between associated companies of multinational enterprises are established on a market value basis and not misused for profit shifts from high to low tax regions.\nTo comply with the Arm\u0026rsquo;s Length Principle, devnullsoft GmbH in Germany and devnullsoft AB in Sweden must operate from a taxation perspective as if they were not associated. Since a regular participant in the market would not provide code contributions, code reviews, tests, or architectural designs free or other contributions of charge to a closed-source software project, devnullsoft GmbH in Germany needs to pay for the received contributions, the so-called transfer price.\nTransfer Prices # Transfer prices are the prices at which an enterprise transfers physical goods and intangibles or provides services to associated enterprises. Since software is intangible itself, the transfer of intangibles like source code, code reviews, bug reports, etc., is our focal point. This transfer price guarantees that devnullsoft AB gets its share of the profit, which then can be taxed by the Swedish tax authorities.\nThe Mechanics of transfer pricing for multinational enterprises In the schematic overview above, we summarize the mechanics of our fictitious company of transfer pricing between the two associated software companies from our example. Although devnullsoft AB contributed significantly to the software-intensive product, without a transfer price, devnullsoft AB has no share of profits; all profits are fully taxable in Germany only. However, if devnullsoft GmbH in Germany pays a transfer price reflecting the value for the services and intangible properties received from its Swedish associated enterprise, devnullsoft AB realizes profits, which then are taxable in Sweden. The Arm\u0026rsquo;s Length Principle is upheld.\nThe Dark Side # The devnullsoft Group does not artificially shift profits to a tax haven. Yet, one can easily imagine that neglecting to charge arm\u0026rsquo;s length prices can be intentionally misused for profit-shifting. Therefore, the OECD guidelines permit tax authorities like the Swedish tax authority to adjust the transfer price where the prices charged are outside an arm\u0026rsquo;s length range. Such an adjustment will carry interest and might be coupled with penalties. In the wake of the OECD\u0026rsquo;s Base Erosion and Profit Shifting (BEPS) Project, the regulatory framework has become considerably stricter at an international and national level. As a result, tax authorities can demand more comprehensive information to detect misalignments and enforce tax adjustments. From the companies\u0026rsquo; perspective, its software development may be (intentionally or unintentionally) non-compliant and face the risk of being legally prosecuted.\nThe Challenges # Now that we understand the underlying mechanics of tax compliance and the transfer price at arm\u0026rsquo;s length as its guiding principle, read the next blog post in this series, where we discuss the tax compliance challenges specific to software engineering.\nThis series is based on our research article Taxing Collaborative Software Engineering published as open-access at IEEE Software. ","date":"March 8, 2024","externalUrl":null,"permalink":"/posts/foundations-of-tax-compliance-in-software-engineering/","section":"Posts","summary":"In this first blog post in the series on tax compliance in software engineering, we start with a gentle introduction to international standards in multinational taxation and its basic Arm\u0026rsquo;s Length Principle from a software engineering perspective.","title":"Foundations of Tax Compliance in Software Engineering","type":"posts"},{"content":"","date":"January 3, 2024","externalUrl":null,"permalink":"/research/open-science/","section":"Research","summary":"","title":"Open Science","type":"research"},{"content":" Work in progress! Find all publications via Google Scholar ","date":"January 3, 2024","externalUrl":null,"permalink":"/publications/","section":"Publications","summary":" Work in progress! Find all publications via Google Scholar ","title":"Publications","type":"publications"},{"content":"Simulations are experiments with a model. Simulations play to their strengths when traditional experiments would have been too complex, too expensive, too lengthy, or simply not possible or accessible otherwise. Those attributes match the objectives and setting of our research since experiments with whole software companies or open-source components are not feasible.\nSince all models are abstractions and, accordingly, simplifications of reality, the quality of an simulation highly depends on the quality of the simulation model and its parametrization.\nIf all parts of the experiment, i.e., the actors, their behaviours, and the context, are modelled as software, the simulation becomes an in-silico experiment or simply a computer simulation.\n","date":"January 3, 2024","externalUrl":null,"permalink":"/research/simulation/","section":"Research","summary":"Simulations are experiments with a model. Simulations play to their strengths when traditional experiments would have been too complex, too expensive, too lengthy, or simply not possible or accessible otherwise. Those attributes match the objectives and setting of our research since experiments with whole software companies or open-source components are not feasible.","title":"Simulation","type":"research"},{"content":" Authors # Michael Dorner, Daniel Mendez, Krzysztof Wnuk, and Jacek Czerwonka\nAbstract # Background: Code review, the discussion around a code change among humans, forms a communication network that enables its participants to exchange and spread information. Although reported by qualitative studies, our understanding of the capability of code review as a communication network is still limited.\nObjective: In this article, we report on a first step towards understanding and evaluating the capability of code review as a communication network by quantifying how fast and how far information can spread through code review: the upper bound of information diffusion in code review.\nMethod: In an in-silico experiment, we simulate an artificial information diffusion within large (Microsoft), mid-sized (Spotify), and small code review systems (Trivago) modelled as communication networks. We then measure the minimal topological and temporal distances between the participants to quantify how far and how fast information can spread in code review.\nResults: An average code review participants in the small and mid-sized code review systems can spread information to between 72% and 85% of all code review participants within four weeks independently of network size and tooling; for the large code review systems, we found an absolute boundary of about 11000 reachable participants. On average (median), information can spread between two participants in code review in less than five hops and less than five days.\nConclusion: We found evidence that the communication network emerging from code review scales well and spreads information fast and broadly, corroborating the findings of prior qualitative work. The study lays the foundation for understanding and improving code review as a communication network.\nDownload # Download PDF Replication Package # michaeldorner/information-diffusion-boundaries-in-code-review Replication package for \u0026ldquo;Upper Bound of Information Diffusion in Code Review\u0026rdquo; Jupyter Notebook 7 15 Meta # DOI: 10.48550/arXiv.2306.08980 arxiv: https://arxiv.org/abs/2306.08980 Publisher: Springer ","date":"January 3, 2024","externalUrl":null,"permalink":"/publications/information-diffusion-in-code-review/","section":"Publications","summary":"Michael Dorner, Daniel Mendez, Krzysztof Wnuk, and Jacek Czerwonka","title":"The Upper Bound of Information Diffusion in Code Review","type":"publications"},{"content":" Preprint - submitted to TOSEM Authors # Michael Dorner, Maximilian Capraro, Oliver Treidler, Tom-Eric Kunz, Darja Å mite, Ehsan Zabardast, Daniel Mendez, and Krzysztof Wnuk\nAbstract # Background: The company-internal reuse of software components owned by organizational units in different countries is taxable.\nObjective: In this article, we introduce the concerns of tax authorities as stakeholders and investigate how software companies can describe their globally distributed software architectures to tax authorities.\nMethod: In an experimental simulation, we (1) develop a viewpoint that frames the concerns of tax authorities, (2) create a view of a large-scale, globally distributed microservice architecture from a multinational enterprise, and (3) evaluate the resulting software architecture description with a panel of four tax experts.\nResults: The panel found our proposed architectural viewpoint properly and sufficiently frames the concerns of taxation stakeholders. The architecture description reveals that almost 70% of all reuse relationships between the 2560 microservices from our case company are cross-border and, therefore, taxable. However, unclear jurisdictions of owners and potentially insufficient definitions of code ownership and software component introduce significant noise to the view that limits the usefulness and explanatory power of our software architecture description.\nConclusion: Although our software architecture description already provides a solid foundation and reveals the importance of tax compliance in software architectures, we stumbled over several fundamental open questions, forming new frontiers in software engineering.\nDownload # Download PDF Meta # DOI: 10.48550/arXiv.2312.00925 arxiv: https://arxiv.org/abs/2312.00925 ","date":"December 1, 2023","externalUrl":null,"permalink":"/publications/taxing-software-architecture/","section":"Publications","summary":"Michael Dorner, Maximilian Capraro, Oliver Treidler, Tom-Eric Kunz, Darja Å mite, Ehsan Zabardast, Daniel Mendez, and Krzysztof Wnuk","title":"Describing Globally Distributed Software Architectures for Tax Compliance","type":"publications"},{"content":"","date":"December 1, 2023","externalUrl":null,"permalink":"/research/software-architecture/","section":"Research","summary":"","title":"Software Architecture","type":"research"},{"content":" Authors # Michael Dorner, Maximilian Capraro, Oliver Treidler, Tom-Eric Kunz, Darja Å mite, Ehsan Zabardast, Daniel Mendez, and Krzysztof Wnuk\nAbstract # The engineering of complex software systems is often the result of a highly collaborative effort. However, collaboration within a multinational enterprise has an overlooked legal implication when developers collaborate across national borders: It is taxable. In this article, we discuss the unsolved problem of taxing collaborative software engineering across borders. We (1) introduce the reader to the basic principle of international taxation, (2) identify three main challenges for taxing collaborative software engineering making it a software engineering problem, and (3) estimate the industrial significance of cross-border collaboration in modern software engineering by measuring cross-border code reviews at a multinational software company.\nDownload # Download PDF Replication Package # michaeldorner/tax_se Replication package for our work on \u0026ldquo;Taxing Collaborative Software Engineering\u0026rdquo; Jupyter Notebook 4 3 Meta # DOI: 10.1109/MS.2023.3346646 arxiv: https://arxiv.org/abs/2304.06539 Publisher: https://www.computer.org/csdl/magazine/so/5555/01/10374093/1TaCXGcl2i4 ","date":"September 19, 2023","externalUrl":null,"permalink":"/publications/taxing-collaborative-software-engineering/","section":"Publications","summary":"Michael Dorner, Maximilian Capraro, Oliver Treidler, Tom-Eric Kunz, Darja Å mite, Ehsan Zabardast, Daniel Mendez, and Krzysztof Wnuk","title":"Taxing Collaborative Software Engineering","type":"publications"},{"content":" Video # Slides # Download slides ","date":"May 3, 2023","externalUrl":null,"permalink":"/talks/information-diffusion-in-code-review/","section":"Talks","summary":"Research talk at BTH, Sweden","title":"Information Diffusion in Code Review: Foundations and Applications","type":"talks"},{"content":" Under construction\u0026hellip; ","date":"May 3, 2023","externalUrl":null,"permalink":"/talks/","section":"Talks","summary":" Under construction\u0026hellip; ","title":"Talks","type":"talks"},{"content":" Best Paper Award at ESEM'22 Authors # Michael Dorner, Darja Smite, Daniel Mendez, Krzysztof Wnuk, and Jacek Czerwonka\nAbstract # Background: Modern code review is expected to facilitate knowledge sharing: All relevant information, the collective expertise, and meta-information around the code change and its context become evident, transparent, and explicit in the corresponding code review discussion. The discussion participants can leverage this information in the following code reviews; the information diffuses through the communication network that emerges from code review. Traditional time-aggregated graphs fall short in rendering information diffusion as those models ignore the temporal order of the information exchange: Information can only be passed on if it is available in the first place.\nAim: This manuscript presents a novel model based on time-varying hypergraphs for rendering information diffusion that overcomes the inherent limitations of traditional, time-aggregated graph-based models.\nMethod: In an in-silico experiment, we simulate an information diffusion within the internal code review at Microsoft and show the empirical impact of time on a key characteristic of information diffusion: the number of reachable participants.\nResults: Time-aggregation significantly overestimates the paths of information diffusion available in communication networks and, thus, is neither precise nor accurate for modelling and measuring the spread of information within communication networks that emerge from code review.\nConclusion: Our model overcomes the inherent limitations of traditional, static or time-aggregated, graph-based communication models and sheds the first light on information diffusion through code review. We believe that our model can serve as a foundation for understanding, measuring, managing, and improving knowledge sharing in code review in particular and information diffusion in software engineering in general.\nDownload # Download PDF Replication Package # michaeldorner/only-time-will-tell Only Time Will Tell: Replication package Jupyter Notebook 3 1 Meta # DOI: 10.1145/3544902.3546254 arxiv: https://arxiv.org/abs/2110.07291 Publisher: https://dl.acm.org/doi/abs/10.1145/3544902.3546254 ","date":"September 20, 2022","externalUrl":null,"permalink":"/publications/only-time-will-tell/","section":"Publications","summary":"Michael Dorner, Darja Smite, Daniel Mendez, Krzysztof Wnuk, and Jacek Czerwonka","title":"Only Time Will Tell: Modelling Information Diffusion in Code Review with Time-Varying Hypergraphs","type":"publications"},{"content":" Video # Slides # Download slides ","date":"October 13, 2021","externalUrl":null,"permalink":"/talks/information-diffusion/","section":"Talks","summary":"Invited talk at Maxkompetens in VÃ¤xjÃ¶, Sweden","title":"Information Diffusion: Towards understanding, modelling, and improving communication in Software Engineering","type":"talks"},{"content":" The Researcher # I love coding. I see beauty in code. Of course, not every code sparks joy, but nicely drafted, well-engineered software does. But what is well-engineered software? How can we make better software and how can we make software better? Finding answers to those fundamental questions of software engineering is at the core of what motivates me. I am particularly interested in two omnipresent aspects of modern software engineering: code review and open source. Both are unique to software engineering and have a long history of existing research. Yet, their stories have not been told entirely.\nAlthough part of my work is qualitative, I love to crunch numbers, dig into large datasets, and apply all sorts of data analysis. In particular, I am an enthusiast of simulations as an empirical research method in and for software engineering research.\nOf course, my research is not a one-man show. I am grateful for working with the most brilliant researchers around the world and extraordinary industry partners. In different contexts, intensities, and research projects, I had the pleasure of working with Microsoft, Spotify, Facebook, Google, Trivago, Ericsson, Siemens, Continental, BlackDuck (now Synopsis), and others.\nAs an advocate for open science, all of my studies are freely available. For the studies of which I am the first author, I publish preprints, provide extensive replication packages, and make code and data publicly available.\nThe Entrepreneur # Together with an interdisciplinary team of researchers, we discovered that collaborative software engineering is actually taxable if the collaboration crosses national borders. We found out that:\nWe are the first to describe and aim to resolve tax compliance for software engineering. Traditional taxation methods do not scale for fine-grained and massive collaboration in software engineering. Tax compliance in software engineering requires dedicated tool support, which does exist on the market. I am thrilled to be part of this journey to develop a software solution for tax compliance in software engineering at Kolabri.\nLearn more about Kolabri and tax-compliance-as-a-service on www.kolabri.io.\nThe Consultant # Not everything is research. Not everything requires one to set out for new knowledge. Some problems, although sometimes very complex and troublesome, require the hands-on and practical application of existing knowledge. On such problems, I work as a software engineering consultant at Capraro Dorner, a consulting company I co-founded with my dear colleague Maximilian Capraro. We offer tailor-made consulting services around open source and inner source for companies.\nLearn more about our services at www.caprarodorner.de.\nThe Human Being # I am the father of two wonderful kids, who are everything to me, and married to the love of my life, Christina. When not in front of a computer, you can likely find me swimming, running, or hiking to compensate for my passion: delicious food. And from time to time, I touch a piano inappropriately with my band KlafÃ¼nf.\n","date":"January 1, 0001","externalUrl":null,"permalink":"/about-me/","section":"Welcome! ðŸŽ‰","summary":"The Researcher # I love coding. I see beauty in code. Of course, not every code sparks joy, but nicely drafted, well-engineered software does. But what is well-engineered software? How can we make better software and how can we make software better?","title":"About me","type":"page"},{"content":"Feel free to reach out! Drop me an e-mail or find me on the following platforms\nMastodon\nGitHub\nORCID\nGoogle Scholar\nLinkedIn\nStackOverflow\nResearchGate\n","date":"January 1, 0001","externalUrl":null,"permalink":"/contact/","section":"Welcome! ðŸŽ‰","summary":"Feel free to reach out! Drop me an e-mail or find me on the following platforms\nMastodon\nGitHub\nORCID\nGoogle Scholar\nLinkedIn\nStackOverflow\nResearchGate","title":"Contact","type":"page"},{"content":"Michael Dorner\nSaarlandstr. 2\n92318 Neumarkt\nTelefon: 0176 56802212\nE-Mail: mail@michaeldorner.de\nRedaktionell verantwortlich: Michael Dorner\nQuelle: eRecht24\n","date":"January 1, 0001","externalUrl":null,"permalink":"/imprint/","section":"Welcome! ðŸŽ‰","summary":"Michael Dorner\nSaarlandstr. 2\n92318 Neumarkt\nTelefon: 0176 56802212\nE-Mail: mail@michaeldorner.de\nRedaktionell verantwortlich: Michael Dorner\nQuelle: eRecht24","title":"Imprint","type":"page"},{"content":"","date":"January 1, 0001","externalUrl":null,"permalink":"/venues/","section":"Venues","summary":"","title":"Venues","type":"venues"}]